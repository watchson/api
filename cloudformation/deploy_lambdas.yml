AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  CodeFilename:
    Type: String
    Default: watchson_api.zip

Resources:

  WatchsonApiExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action: ['cloudwatch:*', 'logs:*', 'xray:*', 'dynamodb:*']
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: lambdaRoleAPIG
      RoleName: WatchsonApiExecutionRole

  WatchsonApiLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "main_controller.handle_request"
      Role:
        Fn::GetAtt:
          - "WatchsonApiExecutionRole"
          - "Arn"
      Code:
        S3Bucket: "watchson-api-deploy-bucket"
        S3Key: !Ref "CodeFilename"
      Runtime: "ruby2.5"
      Timeout: 25
      TracingConfig:
        Mode: "Active"

  Permission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "WatchsonApiLambda"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn:
        Fn::Join: ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "WatchsonApi"}, "/*"]]

  # Api Gateway
  WatchsonApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: "Watchson Api"
      Name: "WatchsonApi"
      Parameters:
        endpointConfigurationTypes: REGIONAL

  # Resources
  WatchsonApiBaseResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref "WatchsonApi"
      ParentId:
        Fn::GetAtt:
          - "WatchsonApi"
          - "RootResourceId"
      PathPart: "api"

  WatchsonApiTimeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref "WatchsonApi"
      ParentId: !Ref WatchsonApiBaseResource
      PathPart: "time"

  # Methods
  WatchsonApiBaseANYMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WatchsonApi
      ResourceId: !Ref WatchsonApiBaseResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WatchsonApiLambda.Arn}/invocations

  WatchsonApiTimeANYMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WatchsonApi
      ResourceId: !Ref WatchsonApiTimeResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WatchsonApiLambda.Arn}/invocations

  # Deploy
  WatchsonApiDevDeployment:
    DependsOn: "WatchsonApiBaseANYMethod"
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref WatchsonApi
      Description: "First Deployment"

  WatchsonApiDevStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: dev
      Description: Prod Stage
      RestApiId: !Ref WatchsonApi
      DeploymentId: !Ref WatchsonApiDevDeployment
      Variables:
        Stack: Dev
      MethodSettings:
        - ResourcePath: "/"
          HttpMethod: "*"
          MetricsEnabled: 'true'
          DataTraceEnabled: 'true'
